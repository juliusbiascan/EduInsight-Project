datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum DeviceUserRole {
  GUEST
  STUDENT
  TEACHER
}

enum State {
  ACTIVE
  INACTIVE
}

model User {
  id                    String                 @id @default(cuid())
  labId                 String?
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Labaratory {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Device    Device[] @relation("LabToDevice")
}

model Device {
  id            String     @id @default(uuid())
  labId         String // Foreign Key to Store
  lab           Labaratory @relation("LabToDevice", fields: [labId], references: [id])
  name          String
  devId         String
  devHostname   String
  devMACaddress String
  isArchived    Boolean
  isUsed        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([labId])
}

model DeviceUser {
  id        String         @id @default(uuid())
  labId     String
  schoolId  String         @unique
  firstName String
  lastName  String
  image     String         @db.LongText
  role      DeviceUserRole @default(GUEST)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ActiveDeviceUser {
  id       String @id @default(uuid())
  labId    String
  userId   String
  deviceId String
  state    State  @default(INACTIVE)
}

model ActiveUserLogs {
  id        String   @id @default(uuid())
  labId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model PowerMonitoringLogs {
  id        String   @id @default(uuid())
  pm_status String
  pm_log_ts String
  userId    String
  deviceId  String
  labId     String
  createdAt DateTime @default(now())
}

model ActivityLogs {
  id          String   @id @default(uuid())
  os          String
  windowClass String
  windowName  String
  al_log_ts   String
  userId      String
  deviceId    String
  labId       String
  createdAt   DateTime @default(now())
}

// {
//   os: 'windows',
//   windowClass: 'Code.exe',
//   windowName: 'ΓùÅ main.js - eduinsight-app - Visual Studio Code',
//   windowDesktop: '0',
//   windowType: '0',
//   windowPid: '16992',
//   idleTime: '0'
// }
